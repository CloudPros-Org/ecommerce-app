name: GKE Issue Personal Admin Kubeconfig

on:
  workflow_dispatch:
    inputs:
      username:
        description: "Person's name (used in SA and kubeconfig filename), e.g., alex"
        required: true
      token_duration:
        description: "Requested token lifetime (e.g., 12h, 1h, 30m). Cluster may cap this."
        required: false
        default: "12h"

jobs:
  issue:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write   # REQUIRED for OIDC to GCP
    env:
      USE_GKE_GCLOUD_AUTH_PLUGIN: "True"
      CLOUDSDK_CORE_DISABLE_PROMPTS: "1"
      GKE_CLUSTER_NAME: ecommerce-app-cluster
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      TOKEN_DURATION: ${{ inputs.token_duration }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Setup gcloud (+ GKE auth plugin)
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: gke-gcloud-auth-plugin

      - name: Install kubectl
        run: |
          sudo apt-get update -y
          sudo apt-get install -y kubectl

      - name: Fetch cluster credentials
        env:
          CLUSTER: ${{ env.GKE_CLUSTER_NAME }}
          PROJECT: ${{ env.GCP_PROJECT_ID }}
        run: |
          LOC=$(gcloud container clusters list --project "$PROJECT" \
                --filter="name=${CLUSTER}" --format="value(location)")
          [ -z "$LOC" ] && echo "Cluster '${CLUSTER}' not found in project ${PROJECT}." && exit 1
          echo "Discovered cluster location: $LOC"
          if ! gcloud container clusters get-credentials "$CLUSTER" --zone "$LOC" --project "$PROJECT"; then
            gcloud container clusters get-credentials "$CLUSTER" --region "$LOC" --project "$PROJECT"
          fi

      - name: Normalize username
        id: norm
        run: |
          SAFE=$(echo "${{ inputs.username }}" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9-]+/-/g' | sed -E 's/^-+|-+$//g' | cut -c1-50)
          echo "safe=${SAFE}" >> $GITHUB_OUTPUT

      - name: Create ServiceAccount in kube-system
        env:
          SA_NS: kube-system
        run: |
          SA="${{ steps.norm.outputs.safe }}-sa"
          kubectl create serviceaccount "${SA}" -n "${SA_NS}" --dry-run=client -o yaml | kubectl apply -f -
          echo "SA_NAME=${SA}" >> $GITHUB_ENV
          echo "SA_NS=${SA_NS}" >> $GITHUB_ENV

      - name: Grant cluster-admin (full control)
        run: |
          kubectl create clusterrolebinding "${SA_NAME}-cluster-admin" \
            --clusterrole=cluster-admin \
            --serviceaccount="${SA_NS}:${SA_NAME}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Mint short-lived token
        id: token
        run: |
          set -e
          TOKEN=$(kubectl -n "${SA_NS}" create token "${SA_NAME}" --duration="${TOKEN_DURATION}")
          echo "token=${TOKEN}" >> $GITHUB_OUTPUT

      - name: Build personal kubeconfig (cluster-admin)
        id: kcfg
        run: |
          SAFE="${{ steps.norm.outputs.safe }}"
          CUR_CTX=$(kubectl config current-context)
          CLUSTER_NAME_CTX=$(kubectl config view -o jsonpath='{.contexts[?(@.name=="'"$CUR_CTX"'")].context.cluster}')
          SERVER=$(kubectl config view -o jsonpath='{.clusters[?(@.name=="'"$CLUSTER_NAME_CTX"'")].cluster.server}')
          CA_B64=$(kubectl config view --raw -o jsonpath='{.clusters[?(@.name=="'"$CLUSTER_NAME_CTX"'")].cluster.certificate-authority-data}')
          echo "$CA_B64" | base64 -d > ca.crt

          OUT="kubeconfig-${SAFE}.yaml"
          CTX_NAME="${SAFE}-admin"

          kubectl config --kubeconfig "$OUT" set-cluster "$CLUSTER_NAME_CTX" \
            --server="$SERVER" \
            --certificate-authority=ca.crt \
            --embed-certs=true

          kubectl config --kubeconfig "$OUT" set-credentials "$SAFE" --token="${{ steps.token.outputs.token }}"
          kubectl config --kubeconfig "$OUT" set-context "$CTX_NAME" --cluster="$CLUSTER_NAME_CTX" --user="$SAFE"
          kubectl config --kubeconfig "$OUT" use-context "$CTX_NAME"
          rm -f ca.crt
          echo "out=${OUT}" >> $GITHUB_OUTPUT

      - name: Upload kubeconfig artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.kcfg.outputs.out }}
          path: ${{ steps.kcfg.outputs.out }}
