name: GKE Create (OIDC + GCS backend)

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: "GCP Project ID"
        required: false
        default: "spry-effect-470712-b5"
      region:
        description: "GCP Region"
        required: false
        default: "europe-west2"
      cluster_name:
        description: "Cluster name"
        required: false
        default: "ecommerce-app-cluster"

jobs:
  terraform:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      TF_IN_AUTOMATION: "true"
      GCP_PROJECT_ID: ${{ inputs.project_id || secrets.GCP_PROJECT_ID }}
      GCP_REGION: ${{ inputs.region || secrets.GCP_REGION }}
      GCS_BACKEND_BUCKET: ${{ secrets.GCS_BACKEND_BUCKET }}
      GCS_BACKEND_PREFIX: "gke"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Ensure GCS bucket exists
        run: |
          set -e
          if ! gsutil ls -b gs://${GCS_BACKEND_BUCKET} >/dev/null 2>&1; then
            gsutil mb -p ${GCP_PROJECT_ID} -l ${GCP_REGION} -b on gs://${GCS_BACKEND_BUCKET}
          fi

      - name: Terraform Init (GCS backend)
        working-directory: infra/gcp-gke
        run: |
          terraform init \
            -backend-config="bucket=${GCS_BACKEND_BUCKET}" \
            -backend-config="prefix=${GCS_BACKEND_PREFIX}"

      - name: Terraform Apply
        working-directory: infra/gcp-gke
        run: |
          terraform apply -auto-approve \
            -var="project_id=${{ env.GCP_PROJECT_ID }}" \
            -var="region=${{ env.GCP_REGION }}" \
            -var="cluster_name=${{ inputs.cluster_name }}"

      - name: Generate kubeconfig via gcloud
        env:
          CLUSTER: ${{ inputs.cluster_name }}
          REGION: ${{ env.GCP_REGION }}
          PROJECT: ${{ env.GCP_PROJECT_ID }}
        run: |
          # Fetch credentials into runners default kubeconfig
          gcloud container clusters get-credentials "${CLUSTER}" --region "${REGION}" --project "${PROJECT}"
          # Write a standalone kubeconfig file for download
          kubectl config view --raw > infra/gcp-gke/kubeconfig

      - name: Upload kubeconfig artifact
        uses: actions/upload-artifact@v4
        with:
          name: gke-kubeconfig
          path: infra/gcp-gke/kubeconfig
